<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔-->
<!-- 如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟-->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->

<configuration scan="true" scanPeriod="60 seconds" debug="true">

	<!-- 定义日志文件,输入位置 -->
	<property name="log_dir" value="/Users/rocky/Desktop/logs" />
	
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	
	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 对日志进行格式化 -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
		</layout>
	</appender>

    <!-- 所有日志文件-->
    <appender name="ALLLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <Encoding>UTF-8</Encoding>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <file>all.log</file>
            <fileNamePattern>${log_dir}/all/%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
        </encoder>
    </appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<file>error-log.log</file>
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
			<minIndex>1</minIndex> 
			<maxIndex>3</maxIndex> 
		</rollingPolicy>
		
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> 
			<maxFileSize>500MB</maxFileSize> 
		</triggeringPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- WARN级别日志 appender -->
	<appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<file>warn-log.log</file>
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/warn/%d{yyyy-MM-dd}/warn-log.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- INFO级别日志 appender -->
	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<file>info-log.log</file>
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/info/%d{yyyy-MM-dd}/info-log.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<file>debug-log.log</file>
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/debug-log.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- TRACE级别日志 appender -->
	<appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>  
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>TRACE</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<file>trace-log.log</file>
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/trace/%d{yyyy-MM-dd}/trace-log.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

  <!--跑批日志-->
    <!-- 
    <appender name="TaskLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <Encoding>UTF-8</Encoding>  
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	   	 	<fileNamePattern>${log_dir}/task/%d{yyyy-MM-dd}.log</fileNamePattern>
	    	<maxHistory>30</maxHistory>
	    </rollingPolicy>
	    <encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
	    </encoder>
    </appender>
    <appender name="SendLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	    	<fileNamePattern>${log_dir}/send/%d{yyyy-MM-dd}.log</fileNamePattern>
	    	<maxHistory>30</maxHistory>
	    </rollingPolicy>
	    <encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
	    </encoder>
    </appender>
    -->
    
    <!-- 为某个包下的所有类指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName  -->
    <!-- 
    <logger name="com.aa.bb" >
    	<appender-ref ref="TaskLog" />
    </logger>
    <logger name="com.aa.cc" >
    	<appender-ref ref="SendLog" />
    </logger>
    -->

	<logger name="java.sql.PreparedStatement" level="DEBUG" />
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="org.apache.ibatis" level="DEBUG" />
	<logger name="org.apache.ibatis.datasource.pooled.PooledDataSource" level="DEBUG" />
	<logger name="org.apache.ibatis.jdbc.SQL" level="DEBUG" />
	<logger name="org.apache.ibatis.jdbc.SqlBuilder" level="DEBUG" />
	<logger name="org.apache.ibatis.jdbc.ScriptRunner" level="DEBUG" />
	<logger name="org.apache.ibatis.mapping.SqlSource" level="DEBUG" />
	<logger name="org.apache.ibatis.mapping.MappedStatement" level="DEBUG" />
	<logger name="org.apache.ibatis.scripting.xmltags.DynamicContext" level="DEBUG" />
	<logger name="org.apache.ibatis.executor.Executor" level="DEBUG" />
	<logger name="org.apache.ibatis.executor.BaseExecutor" level="DEBUG" />
	
	<logger name="org.mongodb.driver.cluster" level="WARN"/>                                     
	<logger name="org.mongodb" level="WARN"/>
	
	<!-- root级别 DEBUG -->
	<root level="DEBUG">
		<!-- 控制台输出 -->
		<appender-ref ref="STDOUT" />
		<!-- 文件输出 -->
		<appender-ref ref="ALLLOG" />
		<appender-ref ref="ERROR" />
		<appender-ref ref="WARN" />
		<appender-ref ref="INFO" />
		<appender-ref ref="DEBUG" />
		<appender-ref ref="TRACE" />
	</root>
	
</configuration> 

